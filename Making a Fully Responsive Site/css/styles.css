/*  Fonts
    -----
    font-family: 'Lora', serif;
    font-family: 'Ubuntu', sans-serif;
 */

body {
    margin: 0;
    font-family: 'Ubuntu', sans-serif;
    font-size: 1.125rem;
    font-weight: 300;
    line-height: 1.6;
}

img {
    /* These two are very very important 
    and you may be applying them all the 
    time to img tags. */
    max-width: 100%;
    display: block;
}

.image-full {
    max-height: 300px;
    width: 100%;
    object-fit: cover;
    margin-bottom: 2em;
}

/* ==================
    Typography
   ================== */

h1, 
h2,
h3 {
    font-family: 'Lora', serif;
    font-weight: 400;
    color: #143774;
    margin-top: 0;
}

h1 {
    font-size: 2rem;
    margin: 0;
}

h3 {
    color: #1792d2;
}

a {
    color: #1792d2;
}

a:hover,
a:focus {
    color: #143774;
}

strong {
    font-weight: 700;
}

/* h1 subtitle */
.subtitle {
    font-weight: 700; /* designers call it as bold */
    color: #1792d2;
    font-size: .75rem;
    margin: 0;
    text-transform: uppercase;
}

.article-title {
    font-family: 1.5rem;
}

.article-read-more,
.article-info {
    font-size: .875rem;
}

.article-read-more {
    color: #1792d2;
    text-decoration: none;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 1px;
}

.article-read-more:hover,
.article-read-more:focus {
    color: #143774;
    text-decoration: underline;
}

.article-info {
    margin: 2em 0;
}

.widget-title,
.widget-recent-post-title {
    font-size: 1rem;
    line-height: 1.4;
}

.widget-title {
    font-size: 1rem;
    font-family: 'Ubuntu', sans-serif;
    font-weight: 700;
    letter-spacing: 1.5px;
}

.widget-recent-post-title {
    color: #143774;
}

/* ==================
    Layout
   ================== */

.container {
    width: 90%;
    max-width: 900px;
    margin: 0 auto;
}

.container-flex {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

header {
    background: #f8f8f8;
    padding: 2em 0; /* 1em=16px */
    text-align: center;
    margin-bottom: 3em;
}

footer {
    background: #143774;
    color: rgba(255, 255, 255, .75);
    text-align: center;
    padding: 3em 0;
}

@media (min-width: 720px) {
    .container-flex {
        flex-direction: row;
    }

    header {
        text-align: left;
    }

    main {
        width: 70%;
    }
    
    aside {
        width: 25%;
        min-width: 200px;
        margin-left: 1em;
    }
}


/* navigation */

nav ul {
    /* border: 1px solid magenta; */
    
    list-style: none;
    padding: 0;
    display: flex;
    /* People often try using text-align: center; but don't ever 
    forget that this property looks up for the last children and 
    aligns them relative to their direct parent, which in this 
    case if applied here, it would center the <a> elements relative to 
    the width of the <li>, which has been shrunk because of the flex 
    property applied to the <ul>, meaning the available width is 
    almost the size of the <a>, hence the text-centering would not
    be noticeable. That is why we use justify-content: */
    justify-content: center; 

    /* 
    justify-content: space-between;
    width: 350px;
    
    If we space out our <li>'s with these two properties
    it would have looked good but what if we add more pages 
    to our site? we would have to come and make changes here again... 
    */
}

nav li {
    /* border: 2px dotted orange; */

    /* ... instead we will space out our 
    <li> elements by adding margin*/
    margin-left: 2em;
}

nav a {
    /* border: 3px solid green; */
    text-decoration: none;
    color: #707070;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 1px;
    padding: .25em 0;
}

nav a:hover,
nav a:focus {
    color: #1792d2  
}

.current-page {
    border-bottom: 1px solid #707070;
}

.current-page:hover {
    color: #707070;
}

@media (max-width: 720px) {
    nav ul {
        flex-direction: column;
    }

    nav li {
        margin: .5em 0;
    }
}

/* articles */

.article-featured {
    border-bottom: #707070 1px solid;
    padding-bottom: 2em;
    margin-bottom: 2em;
}

.article-recent {
    display: flex;
    flex-direction: column;
    margin-bottom: 2.5em;
}

/* In flex children we can use the order property to rearrange them.
In this case we used the order property as our html meaningful order
is first titles and then images or first main contents and then secondary 
ones. Always write HTML as if there wont be any CSS applied! 
If two order properties have the same value, they will appear as in the 
way it was written in the HTML. We can also have negative values. */
.article-recent-main {
    order: 2;
}

.article-recent-secondary {
    order: 1;
}

@media(min-width: 720px){
    .article-recent {
        flex-direction: row;
        justify-content: space-between;
    }

    .article-recent-main {
        width: 67%;
    }

    .article-recent-secondary {
        width: 30%;
    }

    .article-featured {
        display: flex;
        flex-direction: column;
    }

    .article-featured .article-info {
        order: -1;
    }

    .article-image {
        order: -2;
        min-height: 250px;
        object-fit: cover;
    }
}

/* widgets */

.sidebar-widget {
    border: 20px solid #EBEBEB;
    padding: 1em;
    margin-bottom: 2em;
}

.widget-recent-post {
    display: flex;
    flex-direction: column;
    border-bottom: 1px solid #707070;
    margin-bottom: 1em;
}

/* Note that :last-child makes reference to the 
last html child in the group, not the last html
child of class ".widget-recent-post" */
.widget-recent-post:last-child {
    border: 0;
    margin: 0;
}

.widget-recent-post .widget-image {
    order: -1;
}